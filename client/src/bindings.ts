
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async greet() : Promise<Position> {
    return await TAURI_INVOKE("greet");
}
}

/** user-defined events **/



/** user-defined constants **/



/** user-defined types **/

/**
 * Possible types of display positions
 */
export type Position = 
/**
 * Object position used in interface elements like the deck viewer which
 * don't rely on game positioning.
 */
"default" | 
/**
 * Object is not visible.
 */
"offscreen" | 
/**
 * Object is prominently revealed, being shown at a large size after
 * being played.
 */
"played" | 
/**
 * Object is on the stack
 */
"stack" | 
/**
 * Object is in a player's hand
 */
"userHand" | "enemyHand" | 
/**
 * Object is in a player's deck
 */
"userDeck" | "enemyDeck" | 
/**
 * Object is in a player's void
 */
"userVoid" | "enemyVoid" | 
/**
 * Object is in this player's banished zone
 */
"userBanished" | "enemyBanished" | 
/**
 * Object is on the battlefield
 */
"userBattlefield" | "enemyBattlefield" | 
/**
 * Object is being displayed in a card browser, e.g. to select from a list
 * of cards while searching
 */
"browser" | 
/**
 * Object is being displayed in a list of cards available to select in a
 * card selector.
 */
"cardSelectionChoices" | 
/**
 * Object is being displayed in a location for picking its relative order
 */
"cardOrderLocationUnordered" | "cardOrderLocationDeck" | "cardOrderLocationDeckBottom" | "cardOrderLocationVoid" | 
/**
 * Object has just been revealed to this viewer
 */
"revealed" | 
/**
 * Object is in a temporary holding space for cards in hand while resolving
 * some other 'play card' ability.
 */
"handStorage"

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
