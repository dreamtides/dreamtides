Please follow all of the "code style" and "validating changes" rules below at
all times.


# CODE STYLE:


- Avoid creating new variables via "let" statements, just write code inline.
- DO NOT add inline comments to code
- DO NOT delete existing inline comments
- DO NOT fully-qualify names in code ever
- Function calls and enum values have exactly one qualifier, struct names have
  zero qualifiers:
  - WRONG FUNCTION CALL: crate::zone_mutations::move_card::to_destination_zone()
  - WRONG FUNCTION CALL: to_destination_zone()
  - WRONG ENUM VALUE: battle_state::battle_cards::zone::Zone::Battlefield
  - WRONG STRUCT NAME: battle_state::BattleState
  - CORRECT ENUM VALUE: Zone::Battlefield
  - CORRECT FUNCTION CALL: move_card::to_destination_zone()
  - CORRECT STRUCT NAME: BattleState
- Public functions and types go at the TOP of the file, then private ones.
- Don't add "pub use" for anything.


# VALIDATING CHANGES


- After completing work, please always run "just fmt" to apply rustfmt
  formatting rules
- After completing work, please ALWAYS run "just review" to validate changes
- After completing work, if you change any structs in display_data, please
  run the "just schema" command.
- After completing work, review the code structure in .cursorrules for
  correctness and suggest any needed additions or changes.
- Do not print a summary of changes after completing work.


# PROJECT CONTEXT


This project is an implementation of a rules engine for the 'Dreamtides'
card game. Dreamtides is a game similar to TCGs like 'Magic: the Gathering'.
Players put 'character' cards into play and use one-time 'event' cards to affect
the game. Cards are played using a resource called 'energy'. Characters have a
value called 'spark' that lets them generate victory 'points'. Playing a character
is called 'materializing' it and destroying it is called 'dissolving' it.
Dissolved characters and played events go the discard pile, which is called the
'void'. Playing one game or match of Dreamtides is known as a 'battle'.


# DETAILED CODE STRUCTURE


The code is structured as a series of Rust crates using the cargo "workspace" feature.


## Data Crates


These crates primarily contain struct & enum data structure definitions.

### src/core_data
Contains fundamental data types and identifiers used throughout the rules
engine:

- **identifiers.rs** - Core game identifiers including `CardIdentity` (for card
definitions),  `PlayerName`, `UserId`, and `BattleId`
- **numerics.rs** - Game resource types including `Energy` (card costs), `Spark` (character power), `Points` (victory points), and `TurnId`
- **card_types.rs** - Card classification enums including `CardType` (Character/Event/etc.) and `CharacterType` (Ancient/Mage/Warrior/etc.)
- **types.rs** - Basic game enums like `PlayerName` with opponent() method and `CardFacing` (FaceUp/FaceDown)
- **display_color.rs** - `DisplayColor` struct and predefined color constants for UI rendering

### src/battle_state
Contains data types related to an ongoing battle.

- **battle_cards/** - Card state management including `BattleCardState`, `CharacterState`, `Zone` enum, and `CardSet` collections
- **battle_player/** - Player state with `BattlePlayerState` (energy, points, spark) and `PlayerMap` for dual-player data
- **actions/** - `BattleAction` enum defining all possible player actions (play card, pass priority, select targets, etc.)
- **core/** - `EffectSource` enum tracking the source of game effects (player actions, card abilities, game rules)
- **prompt_types/** - `PromptData` and `PromptType` for user interaction prompts (choose targets, make choices, etc.)

#### src/battle_state/battle
Contains core battle state management and card tracking:

- **battle_state.rs** - Central `BattleState` struct containing all game state including cards, players, animations, and turn data
- **card_id.rs** - Card identification system with zone-specific ID types: `CardId`, `CharacterId`, `HandCardId`, `StackCardId`, etc.
- **all_cards.rs** - `AllCards` struct managing card locations across all zones (hand, deck, battlefield, stack, void, banished)
- **battle_status.rs** - `BattleStatus` enum tracking game progression (Setup, Playing, GameOver) and win conditions
- **battle_turn_phase.rs** - `BattleTurnPhase` enum defining turn structure (Judgment, Dreamwell, Draw, Main, Ending)

### src/ability_data
Contains data structures for card abilities and game effects:

- **ability.rs** - Main `Ability` enum defining the four ability types: `EventAbility`, `StaticAbility`, `ActivatedAbility`, and `TriggeredAbility`
- **effect.rs** - Core `Effect` and `EffectWithOptions` types representing game state mutations with optional conditions and costs
- **standard_effect.rs** - Comprehensive `StandardEffect` enum containing all possible game effects (materialize, dissolve, draw cards, etc.)
- **predicate.rs** - `Predicate` and `CardPredicate` system for targeting and filtering cards (Your, Enemy, This, etc.)
- **cost.rs** - `Cost` enum defining all possible costs to pay for abilities (energy, discard cards, abandon characters, etc.)

### src/action_data
Contains user interface and player action definitions:

- **game_action_data.rs** - Main `GameAction` enum wrapping all possible user interface actions (battle actions, display actions, debug actions)
- **battle_display_action.rs** - `BattleDisplayAction` enum for UI-specific actions like opening panels, browsing cards, and toggling visibility

### src/display_data

Contains data structures for UI rendering and client-server communication:

- **battle_view.rs** - Core `BattleView` struct representing complete visual game state with `PlayerView`, `InterfaceView`, and UI components
- **card_view.rs** - `CardView` and `RevealedCardView` structs defining card visual properties, actions, and display metadata
- **command.rs** - `Command` enum and `CommandSequence` for animation and visual effect instructions sent to the client
- **object_position.rs** - `ObjectPosition` and `Position` enums defining where game objects appear in the UI layout
- **request_data.rs** - HTTP request/response structures for client-server API communication (`ConnectRequest`, `PerformActionRequest`, etc.)


## AI Crates


The AI system handles computer opponents during the game.

### src/ai_agents

- **agent_search.rs** - Main AI decision-making engine with `select_action()` function implementing various strategies (Monte Carlo, random, first available)

### src/ai_data

- **game_ai.rs** - `GameAI` enum defining available AI agent types (Monte Carlo, random, first available, etc.)

### src/ai_matchup

- **run_matchup.rs** - Binary program for running battles between AI agents and collecting performance statistics

### src/ai_uct

- **uct_search.rs** - Monte Carlo Tree Search implementation using the UCT algorithm for AI decision making


## Display Crates


These crates are used to display visual state to the player.

### src/asset_paths

- Utility functions for constructing asset paths to third-party visual and audio resources (Hovl Studio effects, Poneti UI sprites, etc.)

### src/display

Contains visual rendering and UI display logic:

- **core/response_builder.rs** - Primary builder used to render game state with `ResponseBuilder` struct for constructing command sequences
- **rendering/battle_rendering.rs** - Core battle view rendering with `battle_view()` function creating complete visual state snapshots
- **rendering/card_rendering.rs** - Card view generation including visual properties, actions, and effect previews for all card states
- **display_actions/outcome_simulation.rs** - Game state simulation for action previews including `action_effect_preview()` and victory prediction
- **rendering/animations.rs** - Visual effect rendering system handling battle animations, sound effects, and state transitions
- **display_actions/apply_battle_display_action.rs** - Handles UI-specific actions like card browsing, panel opening, and display state changes
- **panels/** - UI panel system including developer tools, card browsers, and configuration interfaces
- **rendering/interface_rendering.rs** - Game interface rendering with buttons, prompts, and overlay management

### src/masonry

Contains UI layout and styling system for flexbox-based user interface
components. This is inspired by HTML & CSS but actually targets the UI system of
the Unity game engine (UIToolkit).

- **flex_node.rs** - `FlexNode` struct defining the main UI component tree structure with children, event handlers, and styling options
- **flex_style.rs** - `FlexStyle` struct providing comprehensive CSS-like styling properties for layout, colors, borders, fonts, and animations
- **dimension.rs** - `Dimension` and `DimensionGroup` structs for layout measurements supporting pixels, percentages, viewport units, and safe area insets
- **borders.rs** - Border styling types including `BorderWidth`, `BorderColor`, and `BorderRadius` for UI component borders
- **flex_enums.rs** - Flexbox layout enums like `FlexAlign`, `FlexDirection`, `FlexJustify`, and `TextAlign` for positioning and alignment

### src/ui_components

Contains reusable UI component system built on top of the masonry layout system:

- **component.rs** - Core `Component` trait that all reusable UI pieces implement, providing a uniform interface for rendering to `FlexNode`
- **box_component.rs**, **text_component.rs**, **button_component.rs**, **panel_component.rs** - Main UI components including containers, text display, interactive buttons, and modal-style panels
- **typography.rs** - Typography system with predefined text styles like `ButtonLabel`, `Body2`, and `StackTrace` that automatically scale for mobile devices
- **display_properties.rs** - Device-specific display property management for handling different screen sizes and mobile vs desktop rendering
- **wrapper.rs** - Type erasure system allowing heterogeneous collections of components to be handled uniformly through `WrapperComponent`


## Battle Rules Engine Crates


These crates focus on the primary execution of the battle rules engine.

### src/battle_queries

Contains query functions for reading and analyzing battle state without mutation:

- **legal_action_queries/** - Core system for determining valid player actions including `legal_actions::compute()` and `next_to_act()`
- **battle_card_queries/card_properties.rs** - Card property queries like `cost()`, `card_type()`, `is_fast()`, and `display_name()`
- **battle_card_queries/card_abilities.rs** - Card-specific ability definitions and configurations for all game cards
- **card_ability_queries/effect_predicates.rs** - Predicate matching system for targeting effects (`matching_characters()`, `matching_cards_on_stack()`)
- **battle_player_queries/player_properties.rs** - Player state queries like `spark_total()` for calculating derived values
- **legal_action_queries/can_play_cards.rs** - Determines which cards can be played from hand based on costs and restrictions
- **debug_snapshot/debug_battle_snapshot.rs** - Creates human-readable debug representations of complete battle state
- **battle_player_queries/costs.rs** - Cost validation system with `can_pay()` for checking if players can afford actions
- **macros/** - Debugging and logging macros including `battle_trace!`, `assert_that!`, and `panic_with!` for tracing game state and errors

### src/battle_mutations

Contains functions for mutating and modifying battle state:

- **actions/apply_battle_action.rs** - Main entry point for executing all player actions with `execute()` function
- **card_mutations/move_card.rs** - Core card movement functions like `from_hand_to_stack()`, `from_battlefield_to_void()` between zones
- **effects/apply_effect.rs** - Applies card effects and resolves game mechanics based on ability definitions
- **play_cards/play_card.rs** - Handles playing cards from hand including cost payment and priority management
- **play_cards/resolve_card.rs** - Card resolution logic with `pass_priority()` system for stack-based gameplay
- **phase_mutations/turn.rs** - Turn management including `start_turn()` and phase transitions (Judgment, Dreamwell, Draw, Main)
- **player_mutations/energy.rs** - Energy system with `spend()`, `gain()`, and `set()` for resource management
- **prompt_mutations/** - User interaction system for targeting, choices, and additional costs during card play

### src/database

- **sqlite_database.rs** - SQLite database connection and operations for persistent storage of user save files and game state

### src/game_creation

- **new_battle.rs** - Creates and initializes new battle instances with player configuration and random seeding
- **new_test_battle.rs** - Sets up test battles with predefined decks, initial hands, and starting game state


## Utilities


### src/logging

- **logging.rs** - Configures tracing infrastructure with dual output (stdout and file) using ForestLayer for structured logging with emojis and custom formatting

### src/parser

Contains text parsing system that converts human-readable card rules text into structured ability data using the `chumsky` parsing library:

- **ability_parser.rs** - Main entry point with `parse()` function that converts card rules text into `Vec<Ability>` data structures
- **standard_effect_parser.rs** - Comprehensive parser for all standard game effects like drawing cards, gaining energy, and materializing characters
- **card_predicate_parser.rs** - Parses card targeting and filtering expressions like "enemy character" or "character with cost $3 or less"
- **cost_parser.rs** - Parses ability costs including energy costs, discarding cards, and abandoning characters
- **parser_utils.rs** - Utility functions for common parsing patterns including `phrase()`, `numeric()`, and `text_number()`


## Rules Engine Entry Points


These are the top-level crates which invoke the rules engine.

### src/dev_server

- **dev_server.rs** - HTTP server providing web API endpoints (`/connect`, `/perform_action`, `/poll`, `/log`) for development and testing of the rules engine

### src/plugin

- **plugin.rs** - Implements a C plugin which exposes the rules engine to the
  Unity game engine in release builds.

### src/rules_engine

Main orchestration crate that coordinates all subsystems and provides the primary API entry points:

- **engine.rs** - Core engine with `connect()`, `poll()`, and `perform_action()` functions that handle client-server communication and coordinate all other subsystems
- **handle_battle_action.rs** - Executes battle actions with `execute()` function, handles auto-execution of forced moves, and manages AI player turns
- **serialize_save_file.rs** and **deserialize_save_file.rs** - Converts `BattleState` to/from persistent `SaveFile` format for game state persistence
- **error_message.rs** - Displays user-friendly error messages to players when rules engine errors occur
- **client_logging.rs** - Processes logging events from the client using the tracing infrastructure for debugging and monitoring

