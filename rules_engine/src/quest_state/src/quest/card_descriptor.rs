use core_data::identifiers::{BaseCardId, CardIdentity};
use tabula_ids::test_card;

/// Returns the [CardIdentity] for a given base card with no modifications.
pub fn get_base_identity(base_id: BaseCardId) -> CardIdentity {
    match base_id {
        test_card::TEST_VANILLA_CHARACTER => CardIdentity(0),
        test_card::TEST_DISSOLVE => CardIdentity(1),
        test_card::TEST_NAMED_DISSOLVE => CardIdentity(2),
        test_card::TEST_COUNTERSPELL_UNLESS_PAYS => CardIdentity(3),
        test_card::TEST_COUNTERSPELL => CardIdentity(4),
        test_card::TEST_COUNTERSPELL_CHARACTER => CardIdentity(5),
        test_card::TEST_VARIABLE_ENERGY_DRAW => CardIdentity(6),
        test_card::TEST_DRAW_ONE => CardIdentity(7),
        test_card::TEST_TRIGGER_GAIN_SPARK_WHEN_MATERIALIZE_ANOTHER_CHARACTER => CardIdentity(8),
        test_card::TEST_TRIGGER_GAIN_SPARK_ON_PLAY_CARD_ENEMY_TURN => CardIdentity(9),
        test_card::TEST_TRIGGER_GAIN_TWO_SPARK_ON_PLAY_CARD_ENEMY_TURN => CardIdentity(10),
        test_card::TEST_ACTIVATED_ABILITY_DRAW_CARD => CardIdentity(11),
        test_card::TEST_MULTI_ACTIVATED_ABILITY_DRAW_CARD_CHARACTER => CardIdentity(12),
        test_card::TEST_FAST_ACTIVATED_ABILITY_DRAW_CARD_CHARACTER => CardIdentity(13),
        test_card::TEST_FAST_MULTI_ACTIVATED_ABILITY_DRAW_CARD_CHARACTER => CardIdentity(14),
        test_card::TEST_ACTIVATED_ABILITY_DISSOLVE_CHARACTER => CardIdentity(15),
        test_card::TEST_DUAL_ACTIVATED_ABILITY_CHARACTER => CardIdentity(16),
        test_card::TEST_FORESEE_ONE => CardIdentity(17),
        test_card::TEST_FORESEE_TWO => CardIdentity(18),
        test_card::TEST_FORESEE_ONE_DRAW_A_CARD => CardIdentity(19),
        test_card::TEST_DRAW_ONE_RECLAIM => CardIdentity(20),
        test_card::TEST_FORESEE_ONE_RECLAIM => CardIdentity(21),
        test_card::TEST_FORESEE_ONE_DRAW_RECLAIM => CardIdentity(22),
        test_card::TEST_RETURN_VOID_CARD_TO_HAND => CardIdentity(23),
        test_card::TEST_RETURN_ONE_OR_TWO_VOID_EVENT_CARDS_TO_HAND => CardIdentity(24),
        test_card::TEST_MODAL_DRAW_ONE_OR_DRAW_TWO => CardIdentity(25),
        test_card::TEST_MODAL_DRAW_ONE_OR_DISSOLVE_ENEMY => CardIdentity(26),
        test_card::TEST_MODAL_RETURN_TO_HAND_OR_DRAW_TWO => CardIdentity(27),
        test_card::TEST_RETURN_TO_HAND => CardIdentity(28),
        test_card::TEST_PREVENT_DISSOLVE_THIS_TURN => CardIdentity(29),
        _ => panic!("Invalid base card id: {base_id:?}"),
    }
}

/// Returns the [BaseCardId] for a given [CardIdentity].
pub fn get_base_card_id(identity: CardIdentity) -> BaseCardId {
    match identity.0 {
        0 => test_card::TEST_VANILLA_CHARACTER,
        1 => test_card::TEST_DISSOLVE,
        2 => test_card::TEST_NAMED_DISSOLVE,
        3 => test_card::TEST_COUNTERSPELL_UNLESS_PAYS,
        4 => test_card::TEST_COUNTERSPELL,
        5 => test_card::TEST_COUNTERSPELL_CHARACTER,
        6 => test_card::TEST_VARIABLE_ENERGY_DRAW,
        7 => test_card::TEST_DRAW_ONE,
        8 => test_card::TEST_TRIGGER_GAIN_SPARK_WHEN_MATERIALIZE_ANOTHER_CHARACTER,
        9 => test_card::TEST_TRIGGER_GAIN_SPARK_ON_PLAY_CARD_ENEMY_TURN,
        10 => test_card::TEST_TRIGGER_GAIN_TWO_SPARK_ON_PLAY_CARD_ENEMY_TURN,
        11 => test_card::TEST_ACTIVATED_ABILITY_DRAW_CARD,
        12 => test_card::TEST_MULTI_ACTIVATED_ABILITY_DRAW_CARD_CHARACTER,
        13 => test_card::TEST_FAST_ACTIVATED_ABILITY_DRAW_CARD_CHARACTER,
        14 => test_card::TEST_FAST_MULTI_ACTIVATED_ABILITY_DRAW_CARD_CHARACTER,
        15 => test_card::TEST_ACTIVATED_ABILITY_DISSOLVE_CHARACTER,
        16 => test_card::TEST_DUAL_ACTIVATED_ABILITY_CHARACTER,
        17 => test_card::TEST_FORESEE_ONE,
        18 => test_card::TEST_FORESEE_TWO,
        19 => test_card::TEST_FORESEE_ONE_DRAW_A_CARD,
        20 => test_card::TEST_DRAW_ONE_RECLAIM,
        21 => test_card::TEST_FORESEE_ONE_RECLAIM,
        22 => test_card::TEST_FORESEE_ONE_DRAW_RECLAIM,
        23 => test_card::TEST_RETURN_VOID_CARD_TO_HAND,
        24 => test_card::TEST_RETURN_ONE_OR_TWO_VOID_EVENT_CARDS_TO_HAND,
        25 => test_card::TEST_MODAL_DRAW_ONE_OR_DRAW_TWO,
        26 => test_card::TEST_MODAL_DRAW_ONE_OR_DISSOLVE_ENEMY,
        27 => test_card::TEST_MODAL_RETURN_TO_HAND_OR_DRAW_TWO,
        28 => test_card::TEST_RETURN_TO_HAND,
        29 => test_card::TEST_PREVENT_DISSOLVE_THIS_TURN,
        _ => panic!("Invalid card identity: {}", identity.0),
    }
}
